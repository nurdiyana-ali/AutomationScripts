""" 
Creator: Nurdiyana Md Ali
Date: 5th August 2022
Purpose: To automatically generate the monthly's DevOps excel sheets
Revisions: 
v0.1 - Created the excel sheet
v0.2 - Updated the excel sheet with new KESETIA rate, automated Public Holiday
v0.3 - Fixed the error of December overtime sheet generation

How to run: python3 Automation_devops_overtime.py [month in number] [public holiday1] [public holiday2] [public holidayn]
e.g.  python3 Automation_devops_overtime.py 8 1 3 28 31


"""
import xlsxwriter
import datetime as dt
import calendar
import sys


def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + dt.timedelta(n)

def tablefooter(max_row):
    totalcell = max_row-1
    totalcellformula = f"E{max_row}"
    totalformula = f"SUM(E2:E{max_row-1})"
    writetoallworksheets(totalcell, 3, "Total")
    writeformulatoallworksheets(totalcellformula, totalformula)

def writetoallworksheets(therow, thecolumn, thedata):
    worksheet.write(therow, thecolumn, thedata)
    worksheet2.write(therow, thecolumn, thedata)
    worksheet3.write(therow, thecolumn, thedata)
    worksheet4.write(therow, thecolumn, thedata)

def writeformulatoallworksheets(thecell, theformula):
    worksheet.write_formula(thecell, theformula)
    worksheet2.write_formula(thecell, theformula)
    worksheet3.write_formula(thecell, theformula)
    worksheet4.write_formula(thecell, theformula)

def addcolortospecialdays(celllocation, specialday):
    saturdaycolor = workbook.add_format()
    sundayphcolor = workbook.add_format()
    workdayscolor = workbook.add_format()
    
    workdayscolor.set_bg_color("FFFFFF")
    if (specialday == "Sunday"):
        sundayphcolor.set_bg_color("#F4B084")
        worksheet.write(celllocation, "Rest Day", sundayphcolor)
        worksheet2.write(celllocation, "Rest Day", sundayphcolor)
        worksheet3.write(celllocation, "Rest Day", sundayphcolor)
        worksheet4.write(celllocation, "Rest Day", sundayphcolor)
    
    if (specialday == "PH"):
        sundayphcolor.set_bg_color("00B0F0")
        worksheet.write(celllocation, "PH", sundayphcolor)
        worksheet2.write(celllocation, "PH", sundayphcolor)
        worksheet3.write(celllocation, "PH", sundayphcolor)
        worksheet4.write(celllocation, "PH", sundayphcolor)

    if (specialday == "Saturday"):
        saturdaycolor.set_bg_color("FFC000")
        worksheet.write(celllocation, "Saturday", saturdaycolor)
        worksheet2.write(celllocation, "Saturday", saturdaycolor)
        worksheet3.write(celllocation, "Saturday", saturdaycolor)
        worksheet4.write(celllocation, "Saturday", saturdaycolor)

def columnformatting():
    worksheet.set_column(0, 4, 10)
    worksheet2.set_column(0, 4, 10)
    worksheet3.set_column(0, 4, 10)
    worksheet4.set_column(0, 4, 10)

def automationwarning():
    worksheet.write("A36", "This file is automatically generated.")
    worksheet2.write("A36", "This file is automatically generated.")
    worksheet3.write("A36", "This file is automatically generated.")
    worksheet4.write("A36", "This file is automatically generated.")

def publicHolidayOverride(phDate):
    print(phDate)
    referenced_cell=f"D{phDate+1}"
    formula_cell=f"E{phDate+1}"
    formula=f"=IF(AND({referenced_cell}>=KESETIA_rate!B1,{referenced_cell}<=KESETIA_rate!E1),KESETIA_rate!E4,IF(AND({referenced_cell}>=KESETIA_rate!F1,{referenced_cell}<KESETIA_rate!G1),KESETIA_rate!F4,IF({referenced_cell}>=KESETIA_rate!G1,KESETIA_rate!G4,0)))"
    addcolortospecialdays(f"C{phDate+1}", "PH")
    writeformulatoallworksheets(formula_cell, formula)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        requestedMonth = int(sys.argv[1])
        requestedMonthName=calendar.month_name[requestedMonth]
        excelFileName=f"Overtime_Claim_{requestedMonthName}.xlsx"
        print(f"Month is {requestedMonthName}")
        phDates = []
        for i in range(2,len(sys.argv)):
            # second parameter inserted is the public holidays
            phDates.append(int(sys.argv[i])) 
        currentYear = 2023
        # TODO: to automate the detection of currentYear here
        start_date = dt.date(currentYear, requestedMonth, 1)
        if requestedMonth == 12:
            currentYear = currentYear+1
            nextMonth = 1 # December +1 = January
        else:
            currentYear = currentYear
            nextMonth = requestedMonth+1
            
        end_date = dt.date(currentYear, nextMonth, 1)
        last_row = int((end_date - start_date).days)+2   #positioning on excel is +2 from the end of the total dates
                                                        # one row due to array starts from 0, one is to allocated next row of dates

        printed_dates = []
        printed_day = []
        for single_date in daterange(start_date, end_date):
            current_date = single_date.strftime("%d/%m/%Y")
            current_day =  calendar.day_name[single_date.weekday()]
            printed_dates.append(current_date)
            printed_day.append(current_day)

        my_list = ["Date", "Day", "Details", "OT Hours", "Total"]

        # Create an new Excel file and add a worksheet.
        workbook = xlsxwriter.Workbook(excelFileName)
        worksheet = workbook.add_worksheet('Employee1')
        worksheet2 = workbook.add_worksheet('Employee2')
        worksheet3 = workbook.add_worksheet('Employee3')
        worksheet4 = workbook.add_worksheet('Employee4')
        worksheet5 = workbook.add_worksheet('KESETIA_rate')

        kesetia_list = [["Hours",      1, 2, 3, 4, 5, 8],
                        ["Weekdays", 15, 25, 45, 45],
                        ["Saturday", 70, 70, 70, 70, 150],
                        ["Sunday", 70, 70, 70, 70, 150, 150],
                        ["PH", 70, 70, 70, 70, 150, 150]]

        for row_num, row_data in enumerate(kesetia_list):
            for col_num, col_data in enumerate(row_data):
                worksheet5.write(row_num, col_num, col_data)

        for column_num, data in enumerate(my_list):
            writetoallworksheets(0, column_num, data)
            

        for row_num, written_date in enumerate(printed_dates):
            writetoallworksheets(row_num+1, 0, written_date)

        for row_num, written_day in enumerate(printed_day):
            current_row = row_num+1
            excel_row = current_row+1
            formula_cell = f"E{excel_row}"
            referenced_cell = f"D{excel_row}"
            writetoallworksheets(current_row, 1, written_day)
            if written_day == "Sunday":
                formula=f"IF(AND({referenced_cell}>=KESETIA_rate!B1,{referenced_cell}<=KESETIA_rate!E1),KESETIA_rate!E4,IF(AND({referenced_cell}>=KESETIA_rate!F1,{referenced_cell}<KESETIA_rate!G1),KESETIA_rate!F4,IF({referenced_cell}>=KESETIA_rate!G1,KESETIA_rate!G4,0)))"
                addcolortospecialdays(f"C{current_row+1}", "Sunday")
            elif written_day == "Saturday":
                formula = f"=IF({referenced_cell}=KESETIA_rate!B1,KESETIA_rate!B3,IF({referenced_cell}=KESETIA_rate!C1,KESETIA_rate!C3,IF({referenced_cell}=KESETIA_rate!D1,KESETIA_rate!D3,IF({referenced_cell}=KESETIA_rate!E1,KESETIA_rate!E3,IF({referenced_cell}>=KESETIA_rate!F1,KESETIA_rate!F3,0)))))"
                addcolortospecialdays(f"C{current_row+1}", "Saturday")
            else:
                formula = f"=IF({referenced_cell}=KESETIA_rate!B1,KESETIA_rate!B2,IF({referenced_cell}=KESETIA_rate!C1,KESETIA_rate!C2,IF({referenced_cell}=KESETIA_rate!D1,KESETIA_rate!D2,IF({referenced_cell}>=KESETIA_rate!E1,KESETIA_rate!E2,0))))"
                       
            writeformulatoallworksheets(formula_cell, formula)
        for ph in range(len(phDates)):
            publicHolidayOverride(phDates[ph])
            
        tablefooter(last_row)
        columnformatting()
        automationwarning()
        workbook.close()
    else:
        print("Please enter [month_in_number] [public_holiday1] [public_holiday2] [public_holidayn]")
